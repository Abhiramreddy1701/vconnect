import { jwtDecode } from 'jwt-decode';

// Mock JWT utilities (in a real app, tokens would be generated by the server)
export const generateToken = (payload) => {
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
  const encodedPayload = btoa(JSON.stringify({
    ...payload,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours
  }));
  const signature = btoa('mock-signature');
  
  return `${header}.${encodedPayload}.${signature}`;
};

export const decodeToken = (token) => {
  try {
    return jwtDecode(token);
  } catch (error) {
    return null;
  }
};

export const isTokenValid = (token) => {
  try {
    const decoded = decodeToken(token);
    return decoded && decoded.exp * 1000 > Date.now();
  } catch {
    return false;
  }
};